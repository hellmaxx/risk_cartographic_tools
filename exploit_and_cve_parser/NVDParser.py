from urllib import response
from urllib.parse import urlparse
from webbrowser import get
import requests
import zipfile
import json
from neo4j import GraphDatabase

DOWNLOAD_URL = 'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.zip'

neo4j_driver = GraphDatabase.driver("bolt://localhost:7687", auth=("neo4j", "1234567"))
session = neo4j_driver.session()


def downloadZip(url=''):
    try:
        response = requests.get(url=url)
        with open('nvdcve-1.1-modified.json .zip', 'wb') as file:
            file.write(response.content)
        print('Download successfully')
    except Exception as ex:
        print('Download error')


def extractZip():
    try:
        file_zip = zipfile.ZipFile('nvdcve-1.1-modified.json .zip', 'r')
        file_zip.extractall('./')
        print('Extracting successfully')
    except Exception as ex:
        print('Extracting error')


def getCVE(nvd_data):
    items = nvd_data['cve']['CVE_data_meta']['ID']
    return items


def getAssigner(nvd_data):
    items = nvd_data['cve']['CVE_data_meta']['ASSIGNER']
    return items


def getCWE(nvd_data):
    items = nvd_data['cve']['problemtype']['problemtype_data'][0]['description']
    CWE = []
    for i in items:
        if (i['value'] != 'NVD-CWE-noinfo'):
            CWE.append(i['value'])
    return CWE


def getReferences(nvd_data):
    items = nvd_data['cve']['references']['reference_data']
    referncesData = []
    for i in items:
     referncesData.append(i)
    return referncesData


def getURL(nvd_data):
    items = nvd_data['cve']['references']['reference_data']
    urls = []
    for i in items:
        urls.append(i['url'].replace("'", ",").replace("\"", "\'"))
    return urls


def getDomains(nvd_data):
    items = nvd_data['cve']['references']['reference_data']
    temp = []
    for i in items:
        temp.append(urlparse(i['url']).netloc)
    domains = list(set(temp))
    return domains


def getDescription(nvd_data):
    items = nvd_data['cve']['description']['description_data']
    for i in items:
        return i['value']


def getCPE(nvd_data):
    try:
        cpe = []
        items = nvd_data['configurations']['nodes']
        for item in items:
            if len(item['cpe_match']) != 0:
                origin = item['cpe_match']
                for j in origin:
                    cpe.append(j['cpe23Uri'])
                cpeResult = list(set(cpe))
                return cpeResult
            else:
                children = item['children']
                for j in children:
                   cpe.append(j['cpe_match'][0]['cpe23Uri'])
                cpeResult = list(set(cpe))
                return cpeResult
    except Exception as ex:
        return 'None'


def getCVSS2(nvd_data):
    try:
        items = nvd_data['impact']['baseMetricV2']['cvssV2']['vectorString']
        return items
    except Exception as ex:
        return 'None'


def getCVSS3(nvd_data):
    try:
        items = nvd_data['impact']['baseMetricV3']['cvssV3']['vectorString']
        return items
    except Exception as ex:
        return 'None'


def getDate(nvd_data):
    items = nvd_data['publishedDate']
    return items


def getDateSeen(nvd_data):
    items = nvd_data['lastModifiedDate']
    return items


def getVendor(cpe):     
    vend=cpe.split(":")[3]     
    return vend


def getProduct(cpe):     
    prod=cpe.split(":")[4]    
    return prod


def main():
    downloadZip(url=DOWNLOAD_URL)
    extractZip()

    with open('nvdcve-1.1-2016.json', 'r', encoding="utf8") as nvd_file: 
        nvd_data = json.load(nvd_file)
        json.dumps(nvd_data)

    exploitNumber = 14 
    сveCount = int(nvd_data['CVE_data_numberOfCVEs'])

    while (exploitNumber < 15):  
        
        data = nvd_data['CVE_Items'][exploitNumber]

        cve = getCVE(data)
        assigner = getAssigner(data)
        cwe = getCWE(data)
        referencesData = getReferences(data)
        url=getURL(data)
        domain = getDomains(data)
        cpe = getCPE(data)
        cvss2 = getCVSS2(data)
        cvss3 = getCVSS3(data)
        description = getDescription(data).replace("'", "\'").replace("\"", "\'")
        date = getDate(data)
        dateSeen = getDateSeen(data)
        
        # Запрос CVE
        query = "MERGE (cve:CVE {id: '" + cve + "'}) SET cve.descr =\"" + description + "\" ,cve.date='" + date + "', cve.dateSeen='" + dateSeen + "' \n"
        result = session.run(query)

        # Запросы ASSIGNER
        query = "MERGE (a:ASSIGNER {id: '" + assigner + "'}) \n"
        query = query + "MERGE (cve:CVE {id: '" + cve + "'}) \n"
        query = query + "MERGE (cve)-[r:CVEtoASSIGNER]->(a) \n"
        result = session.run(query)

        
        # Запросы CWE
        for i in range(len(cwe)):
            query = "MERGE (cwe:CWE {id: '" + cwe[i] + "'}) \n"
            query = query + "MERGE (cve:CVE {id: '" + cve + "'}) \n"
            query = query + "MERGE (cve)-[r:CVEtoCWE]->(cwe) \n"
            result = session.run(query)
        
        # Запросы URL
    
        for i in referencesData:
            query = "MERGE (url:URL {id: '" + i['url'].replace("'", " ").replace("\"", "\'").replace("[", "").replace("]", "") + "'}) \n"
            query = query + "MERGE (cve:CVE {id: '" + cve + "'}) \n"
            query = query + "MERGE (cve)-[r:CVEtoURL]->(url) \n"

            iD = 0
            for j in i['tags']:
                iD+=1
                query = query + "MERGE (tag" + str(iD) + ":TAG {id: '" + j + "'}) \n"
                query = query + "MERGE (tag" + str(iD) + ")-[:TAGtoURL]->(url) \n"
    
            query = query +"MERGE (s:SOURCE {id: '" + i['refsource'] + "'}) \n"
            query = query + "MERGE (s)-[:SRCtoURL]->(url) \n"
            result = session.run(query)

        # Запросы DOMAIN
        for i in range(len(domain)):
            for j in range(len(url)):
                if (url[j].__contains__(domain[i])):
                 query = "MERGE (url:URL {id: '" + url[j] + "'})  \n"
                 query = query + "MERGE (dom:DOMAIN {id: '" + domain[i] + "'}) \n"
                 query = query + "MERGE (url)-[r:URLtoDOMAIN]->(dom) \n"
                 result = session.run(query)
        
        # Запросы CPE
        try:
            if (cpe != 'None'):
              for i in range(len(cpe)):
                   vendor = getVendor(cpe[i])
                   product = getProduct(cpe[i])
                   query = "MERGE (v:VENDOR {id: '" + vendor + "'}) \n" 
                   query = query + "MERGE (cpe:CPE {id: '" + cpe[i] + "'}) \n"
                   query = query + "MERGE (v)-[r:CPEtoVendor]->(cpe) WITH cpe \n"
                   query = query + "MERGE (p:PRODUCT {id: '" + product + "'})\n" 
                   query = query + "MERGE (p)-[r:CPEtoProd]->(cpe) WITH cpe \n"
                   query = query + "MERGE (cve:CVE {id: '" + cve + "'}) \n"
                   query = query + "MERGE (cve)-[r:CVEtoCPE]->(cpe) \n"
                   result= session.run(query)
        except Exception as ex:
             print(f"None CPE in + {exploitNumber}")
        
        # Запросы CVSS2.0
        if (cvss2 != 'None'):
            query = "MERGE (cvss2:CVSS2 {id: '" + cvss2 + "'}) WITH cvss2 \n"
            query = query + "MERGE (cve:CVE {id: '" + cve + "'}) \n"
            query = query + "MERGE (cve)-[r:CVEtoCVSS2]->(cvss2) \n"
            result = session.run(query)
        
        # Запросы CVSS3.1
        if (cvss3 != 'None'):
            query = "MERGE (cvss3:CVSS3 {id: '" + cvss3 + "'}) \n"
            query = query + "MERGE (cve:CVE {id: '" + cve + "'}) \n"
            query = query + "MERGE (cve)-[r:CVEtoCVSS3]->(cvss3) \n"
            result = session.run(query)
        
        print(exploitNumber)
        exploitNumber += 1

if __name__ == '__main__':
    main()
